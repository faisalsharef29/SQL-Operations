CREATE TABLE [dbo].[ConfigLoader_AuditFindings1](
	[AuditID] [int] IDENTITY(1,1) NOT NULL,
	[DeploymentItemId] [int] NOT NULL,
	[AuditActionID] [int] NOT NULL,
	[Finding] [nvarchar](200) NULL,
 CONSTRAINT [PK_ConfigLoader_AuditFindings1] PRIMARY KEY CLUSTERED 
(
	[AuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ConfigLoader_AuditFindings1]  WITH CHECK ADD  CONSTRAINT [FK_ConfigLoader_AuditFindings1_ConfigLoader_AuditProcedureRef1] FOREIGN KEY([AuditActionID])
REFERENCES [dbo].[ConfigLoader_AuditProcedureRef1] ([AuditActionID])
GO

ALTER TABLE [dbo].[ConfigLoader_AuditFindings1] CHECK CONSTRAINT [FK_ConfigLoader_AuditFindings1_ConfigLoader_AuditProcedureRef1]
GO

ALTER TABLE [dbo].[ConfigLoader_AuditFindings1]  WITH CHECK ADD  CONSTRAINT [FK_ConfigLoader_AuditFindings1_ConfigLoader_DeploymentItem] FOREIGN KEY([DeploymentItemId])
REFERENCES [dbo].[ConfigLoader_DeploymentItem] ([DeploymentItemID])
GO

ALTER TABLE [dbo].[ConfigLoader_AuditFindings1] CHECK CONSTRAINT [FK_ConfigLoader_AuditFindings1_ConfigLoader_DeploymentItem]
GO


--

CREATE PROCEDURE [dbo].[UpdateDeploymentWorkflowStatus] 
	-- Add the parameters for the stored procedure here
	@DeploymentWorkflowID int, 
	@user nvarchar(150)
	--@Stage int
	AS
	BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	-- SELECT @DeploymentWorkflowID, @WorkflowStatusRefID, @User, @Stage
	
	Declare @description nvarchar(250) ,
			@stage int ,
			@count int,
			@CreatedBy varchar(100),
			@CreatedDate Datetime,
			@UpdatedBy varchar(100),
			@UpdateDate Datetime,
			@WorkflowStatusRefID int
		--	,@DeploymentWorkflowID int

	--set @DeploymentWorkflowID = 1
	Set @count = (Select count(*) from [dbo].[ConfigLoader_DeploymentWorkFlowStatus] where DeploymentWorkFlowID = @DeploymentWorkflowID)

	-- New Deployment
	IF (@count = 0)
	Begin
	  SET @stage = 1
	  SET @description = (Select Description from [dbo].[ConfigLoader_DeploymentWorkflowStatusRef] where Stage = @Stage) 
	  SET @WorkflowStatusRefID =  (Select Description from [dbo].[ConfigLoader_DeploymentWorkflowStatusRef] where Stage = @Stage) 
	 INSERT INTO [dbo].[ConfigLoader_DeploymentWorkFlowStatus]
           ([DeploymentWorkFlowID]
           ,[WorkFlowStatusRefID]
           ,[Stage]
           ,[Description]
           ,[WorkflowCreatedBy]
           ,[WorkflowCreateDate]
           ,[WorkflowUpdateBy]
           ,[WorkFlowUpdateDate]
           ,[WorkFlowStartDate]
           ,[WorkFlowEndDate])
     VALUES
           (@DeploymentWorkflowID
           ,@DeploymentWorkflowID
           ,@Stage
           ,@description
           ,@User
           ,GETDATE()
           ,@User
           ,GETDATE()
           ,GETDATE()
           ,GETDATE())
    End

    -- Update to an existing workflow
	ELSE
	Begin
		SET @stage = (Select Max(Stage) from [dbo].[ConfigLoader_DeploymentWorkFlowStatus] where [DeploymentWorkFlowID] = @DeploymentWorkflowID)+1	
		SET @CreatedDate = (Select WorkflowCreateDate from [dbo].[ConfigLoader_DeploymentWorkFlowStatus] where [DeploymentWorkFlowID] = @DeploymentWorkflowID and Stage = 1)	
		SET	@CreatedBy =  (Select WorkflowCreatedBy from [dbo].[ConfigLoader_DeploymentWorkFlowStatus] where [DeploymentWorkFlowID] = @DeploymentWorkflowID and Stage = 1)	
		SET @description = (Select Description from [dbo].[ConfigLoader_DeploymentWorkflowStatusRef] where Stage = @Stage) 
		SET @WorkflowStatusRefID =  (Select WorkflowStatusRefID from [dbo].[ConfigLoader_DeploymentWorkflowStatusRef] where Stage = @stage)

		INSERT INTO [dbo].[ConfigLoader_DeploymentWorkFlowStatus]
           ([DeploymentWorkFlowID]
           ,[WorkFlowStatusRefID]
           ,[Stage]
           ,[Description]
           ,[WorkflowCreatedBy]
           ,[WorkflowCreateDate]
           ,[WorkflowUpdateBy]
           ,[WorkFlowUpdateDate]
           ,[WorkFlowStartDate]
           ,[WorkFlowEndDate])
		 VALUES
           (@DeploymentWorkflowID
           ,@WorkflowStatusRefID
           ,@Stage
           ,@description
           ,@CreatedBy
           ,@CreatedDate
           ,@User
           ,GETDATE()
           ,GETDATE()
           ,GETDATE())
	 
	 end
end
GO

CREATE TABLE [dbo].[ConfigLoader_AuditProcedureRef1](
	[AuditActionID] [int] IDENTITY(1,1) NOT NULL,
	[AuditAction] [varchar](200) NOT NULL,
 CONSTRAINT [PK_ConfigLoader_AuditProcedureRef1] PRIMARY KEY CLUSTERED 
(
	[AuditActionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

--
CREATE PROCEDURE [dbo].[UpdateDeploymentWorkflowStatus] 
	-- Add the parameters for the stored procedure here
	@DeploymentWorkflowID int, 
	@user nvarchar(150)
	--@Stage int
	AS
	BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	-- SELECT @DeploymentWorkflowID, @WorkflowStatusRefID, @User, @Stage
	
	Declare @description nvarchar(250) ,
			@stage int ,
			@count int,
			@CreatedBy varchar(100),
			@CreatedDate Datetime,
			@UpdatedBy varchar(100),
			@UpdateDate Datetime,
			@WorkflowStatusRefID int
		--	,@DeploymentWorkflowID int

	--set @DeploymentWorkflowID = 1
	Set @count = (Select count(*) from [dbo].[ConfigLoader_DeploymentWorkFlowStatus] where DeploymentWorkFlowID = @DeploymentWorkflowID)

	-- New Deployment
	IF (@count = 0)
	Begin
	  SET @stage = 1
	  SET @description = (Select Description from [dbo].[ConfigLoader_DeploymentWorkflowStatusRef] where Stage = @Stage) 
	  SET @WorkflowStatusRefID =  (Select Description from [dbo].[ConfigLoader_DeploymentWorkflowStatusRef] where Stage = @Stage) 
	 INSERT INTO [dbo].[ConfigLoader_DeploymentWorkFlowStatus]
           ([DeploymentWorkFlowID]
           ,[WorkFlowStatusRefID]
           ,[Stage]
           ,[Description]
           ,[WorkflowCreatedBy]
           ,[WorkflowCreateDate]
           ,[WorkflowUpdateBy]
           ,[WorkFlowUpdateDate]
           ,[WorkFlowStartDate]
           ,[WorkFlowEndDate])
     VALUES
           (@DeploymentWorkflowID
           ,@DeploymentWorkflowID
           ,@Stage
           ,@description
           ,@User
           ,GETDATE()
           ,@User
           ,GETDATE()
           ,GETDATE()
           ,GETDATE())
    End

    -- Update to an existing workflow
	ELSE
	Begin
		SET @stage = (Select Max(Stage) from [dbo].[ConfigLoader_DeploymentWorkFlowStatus] where [DeploymentWorkFlowID] = @DeploymentWorkflowID)+1	
		SET @CreatedDate = (Select WorkflowCreateDate from [dbo].[ConfigLoader_DeploymentWorkFlowStatus] where [DeploymentWorkFlowID] = @DeploymentWorkflowID and Stage = 1)	
		SET	@CreatedBy =  (Select WorkflowCreatedBy from [dbo].[ConfigLoader_DeploymentWorkFlowStatus] where [DeploymentWorkFlowID] = @DeploymentWorkflowID and Stage = 1)	
		SET @description = (Select Description from [dbo].[ConfigLoader_DeploymentWorkflowStatusRef] where Stage = @Stage) 
		SET @WorkflowStatusRefID =  (Select WorkflowStatusRefID from [dbo].[ConfigLoader_DeploymentWorkflowStatusRef] where Stage = @stage)

		INSERT INTO [dbo].[ConfigLoader_DeploymentWorkFlowStatus]
           ([DeploymentWorkFlowID]
           ,[WorkFlowStatusRefID]
           ,[Stage]
           ,[Description]
           ,[WorkflowCreatedBy]
           ,[WorkflowCreateDate]
           ,[WorkflowUpdateBy]
           ,[WorkFlowUpdateDate]
           ,[WorkFlowStartDate]
           ,[WorkFlowEndDate])
		 VALUES
           (@DeploymentWorkflowID
           ,@WorkflowStatusRefID
           ,@Stage
           ,@description
           ,@CreatedBy
           ,@CreatedDate
           ,@User
           ,GETDATE()
           ,GETDATE()
           ,GETDATE())
	 
	 end
end
GO